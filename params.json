{"name":"Creating and releasing a Play 2 module","tagline":"","body":"Creating and releasing a Play 2 module\r\n======================================\r\n\r\nThe sections below describe the steps required to create and release a Play 2 module along with a corresponding sample application:\r\n\r\n* The steps are based on how <a href=\"http://sant0s.github.io/play2-chart/\" target=\"_blank\">Play 2 Chart</a> was created\r\n* Some steps may be redundant or missing\r\n* The order of the steps is not strict i.e. some steps may be executed earlier/later than specified\r\n* Some steps may vary according to user preferences (e.g. preferred text editor)\r\n* `<>` refers to a placeholder (e.g. `<module>` is a placeholder for a module name)\r\n* Linux, Eclipse and Play 2.3 are assumed to be part of the development environment\r\n  * These instructions may also work for Play versions above 2.4 (not tested)\r\n* UNIX commands are assumed to take place on the path determined by the most recently executed `cd` command\r\n\r\nCreate module\r\n-------------\r\n\r\n1. Create module: `activator new`\r\n  - Template: play-java\r\n  - Name: `<module>`\r\n      - In Play 1, the module name must match regex `[a-zA-Z]+`\r\n1. Move module to `project-code` subdirectory\r\n  1. `mkdir project-code`: this is the module's directory/Git repository\r\n  1. `mv * project-code`\r\n  1. `cd project-code`\r\n1. Delete unnecessary content/files/directories:\r\n  1. `vi conf/application.conf`: delete all content\r\n  1. `vi project/plugins.sbt`: remove unnecessary plugins\r\n  1. Remove unnecessary files/directories. Examples:\r\n    - `public` or its subdirectories\r\n    - `test/resources`\r\n1. `vi .gitignore`: include files specified in [Appendix A](#appendixa)\r\n1. `rm conf/routes`\r\n1. Build module\r\n  1. `activator`\r\n    1. `run`\r\n    1. Access `localhost:9000` on a browser and fix any compilation issues\r\n1. Eclipsify module\r\n  1. `activator`\r\n    1. `eclipse`\r\n1. Import module project into Eclipse:\r\n  - `File -> Import -> General -> Existing Project into Workspace`\r\n1. Set up module\r\n  1. Delete README\r\n  1. Create README.md\r\n  1. Set name, version (start with `0.1.0`), organisation and dependencies in `build.sbt`\r\n1. Implement the module\r\n  1. Delete the `views` package under `app` if the module won't provide views\r\n  1. Delete the `controllers` package under `app` if the module won't provide controllers\r\n  1. Add code to package `<package>.<project>` under `app`\r\n  1. Write and execute tests: `activator test`\r\n  1. Check that no code problems are reported by Eclipse\r\n  1. Check that no unnecessary logging is generated by the module (search the code for `Logger`)\r\n1. Document the module\r\n  1. Document all API methods using Javadoc\r\n  1. `activator publishLocal`: Javadoc is generated under `target`\r\n  1. Check that:\r\n    1. All public API methods are documented\r\n    1. No module related Javadoc errors are found in log files (under the `logs` directory)\r\n  1. Add full documentation to `README.md`\r\n1. Publish module to local Ivy repository\r\n  1. `activator`\r\n    1. `clean`\r\n    1. `publishLocal`: the module gets published under `~/.ivy2/local`\r\n\r\nCreate module sample application\r\n--------------------------------\r\n\r\n1. Create a directory for sample applications at the same level as `project-code`: `mkdir samples`\r\n1. `cd samples`\r\n1. `activator new`\r\n  - Template: `play-java`\r\n  - Name: `<module>-sample`\r\n1. `cd <module>-sample`\r\n1. Configure the sample application\r\n  1. Delete README\r\n  1. Add full documentation to README.md\r\n  1. Set name, version (start with 0.1.0, it should be in sync with the module one) and dependency to the module in `build.sbt`\r\n1. Delete unnecessary files/directories. Examples:\r\n  - `public` or its subdirectories\r\n  - `test/resources`\r\n1. `vi .gitignore` and include files specified in [Appendix A](#appendixa)\r\n1. Eclipsify module sample application\r\n  1. `activator`\r\n    1. `eclipse`\r\n1. Import module sample project into Eclipse:\r\n  - `File -> Import -> General -> Existing Project into Workspace`\r\n1. Implement the module\r\n  1. Add code to under `app`\r\n  1. Write and execute tests: `activator test`\r\n  1. Test manually at `localhost:9000`\r\n  1. Check that no code problems are reported by Eclipse\r\n\r\nRelease module\r\n--------------\r\n\r\n1. Test module before publishing to GitHub\r\n  1. Remove module from `.ivy2/local` and `.ivy2/cache`\r\n  1. `cd project-code`\r\n  1. `activator`\r\n    1. clean\r\n    1. reload\r\n    1. update\r\n    1. Publish locally: publishLocal\r\n      1. check that module is at `.ivy2/local` and not at `.ivy2/cache`\r\n      1. Check that no unnecessary files/directories exist under `~/.ivy2/local/<package>/<module>. If any, remove them and republish. Examples of unnecessary files/directories include:\r\n        - Files: `.classpath`, `.project`, `.gitignore`\r\n        - Directories: `.settings`, `eclipse`, `javadoc`, `logs`, `.git`, empty directories (e.g. public)\r\n    1. test: all tests should pass\r\n1. Test module sample application against locally published module\r\n  1. `cd samples/<module>-sample`\r\n  1. `activator`\r\n    1. `clean`\r\n    1. `reload`\r\n    1. `update`\r\n    1. `test`: all tests should be ok\r\n    1. `run` and test manually\r\n1. Create a release repository and push it to GitHub\r\n  1. Create a directory for the release repository outside the project one: `mkdir ~/release`\r\n  1. Add built module to it: `cp -rv ~/.ivy2/local/<package>/<project*> ~/release`\r\n  1. `cd release`\r\n  1. Add/commit release files to local Git repository: see [Appendix B](#appendixb)\r\n  1. Create GitHub release repository: see [Appendix C](#appendixc)\r\n  1. Push release files from local Git repository to GitHub release repository: see [Appendix D](#appendixd)\r\n1. Test module sample application against GitHub published module\r\n  1. Remove module from .ivy2/local and .ivy2/cache\r\n  1. `cd samples/<module>-sample`\r\n  2. `vi build.sbt` and include GitHub release repository in `resolvers`\r\n  3. `activator`\r\n    1. `clean`\r\n    1. `reload`\r\n    1. `update`\r\n    1. `test`: all tests should be ok\r\n    1. `run` and test manually\r\n1. Publish module in GitHub\r\n  1. Add/commit module files to local Git repository: see [Appendix B](#appendixb)\r\n  1. Create GitHub module repository: see [Appendix C](#appendixc)\r\n  1. Push module files from local Git repository to GitHub module repository: see [Appendix D](#appendixd)\r\n1. Publish module sample in GitHub\r\n  1. Add/commit module sample files to local Git repository: see [Appendix B](#appendixb)\r\n  1. Create GitHub module sample repository: see [Appendix C](#appendixc)\r\n  1. Push module sample files from local Git repository to GitHub module sample repository: see [Appendix D](#appendixd)\r\n1. Create module web page in GitHub: see [Appendix E](#appendixe)\r\n1. Announce the module on the play-framework Google Group using the e-mail template specified in [Appendix F](#appendixf)\r\n\r\n<a name=\"appendixa\"></a>Appendix A - `.gitignore`\r\n---------------------------------------------------------------------------------------\r\n\r\n`.gitignore` should include at least the following files:\r\n\r\n        .*\r\n        !.gitignore\r\n        logs\r\n        target\r\n        project/project\r\n        project/target\r\n        bin\r\n        activator\r\n        activator.bat\r\n        activator-launch*\r\n\r\nOther files may be considered for inclusion. Examples include:\r\n\r\n        tmp\r\n        .history\r\n        dist\r\n        /out\r\n        /RUNNING_PID\r\n\r\n<a name=\"appendixb\"></a>Appendix B - Add/commit files to local Git repository\r\n-----------------------------------------------------------------------------\r\n\r\n1. `cd <directory>`\r\n1. `git init`\r\n1. `vi .gitignore`: [Appendix A](#appendixa) includes examples of files to be Git ignored\r\n1. `vi README` (recommended for all GitHub repositories)\r\n1. `vi LICENSE` (recommended for all GitHub repositories)\r\n1. `git status`: all files should be unstaged\r\n1. Add all files recursively: `git add .`\r\n1. `git status`: all files should be staged\r\n1. Commit: `git commit -m \"<commit message including version>\"`\r\n1. Tag project: `git tag <tagname>` (e.g. `git tag 0.1.0`)\r\n1. `git status`: all files should be committed i.e. on the master HEAD of the local copy\r\n\r\n<a name=\"appendixc\"></a>Appendix C - Create repository in GitHub\r\n----------------------------------------------------------------\r\n\r\n1. Create repository in GitHub:\r\n  1. Log in GitHub\r\n  1. New repository\r\n  1. Name: `<repository>`\r\n  1. Description (optional): <repository description>\r\n  1. Public\r\n  1. Create repository\r\n  1. Note the repository SSH URL: `git@github.com:<user>/<repository>.git`\r\n\r\n<a name=\"appendixd\"></a>Appendix D - Push files from local Git repository to GitHub\r\n-----------------------------------------------------------------------------------\r\n\r\n1. `cd <local repository>`\r\n1. Associate GitHub (remote) repository with local one: `git remote add origin <repository SSH URL>`\r\n1. Push files from local repository to GitHub: `git push -u origin master`\r\n1. Push tag to remote: `git push origin <tagname>` (e.g. `git push origin 0.1.0`)\r\n\r\n<a name=\"appendixe\"></a>Appendix E - Create module web page in GitHub\r\n---------------------------------------------------------------------\r\n\r\n1. In Github, go to the repository, press Settings and then automatic page generator\r\n1. Copy/paste the contents of the module's `README.md` file onto the body\r\n1. Press \"Continue to layouts\"\r\n1. Select layout\r\n1. Preview page and check that everything's ok\r\n1. Publish page\r\n\r\n<a name=\"appendixf\"></a>Appendix F - Module announcement e-mail template\r\n------------------------------------------------------------------------\r\n\r\n```\r\nSubject: [play-framework] [2.3.x] Play 2 <module> module\r\nTo: play-framework@googlegroups.com\r\n\r\nThe Play 2 <module> module <module description>. It has been published along with a sample application.\r\n\r\nWebsite: https://<user>.github.io/play2-<module>/\r\nDocumentation: https://github.com/<user>/play2-<module>-sample/blob/master/README.md\r\nShort description: The Play 2 <module> module <short description>.\r\n```\r\n\r\nReferences\r\n----------\r\n\r\n* <a href=\"http://www.objectify.be/wordpress/?p=363\" target=\"_blank\">Writing modules for Play 2, part 1: Get something working - Objectify</a>\r\n* <a href=\"http://www.objectify.be/wordpress/?p=374\" target=\"_blank\">Writing modules for Play 2, part 2: Interceptors - Objectify</a>\r\n* <a href=\"http://www.objectify.be/wordpress/?p=410\" target=\"_blank\">Publishing Play 2 modules on github - Objectify</a>\r\n* <a href=\"http://stackoverflow.com/questions/25101844/how-to-define-resolver-for-dependencies-from-custom-repository-on-github\" target=\"_blank\">playframework - How to define resolver for dependencies from custom repository on GitHub? - Stack Overflow</a>","google":"UA-61205906-5","note":"Don't delete this file! It's used internally to help with page regeneration."}